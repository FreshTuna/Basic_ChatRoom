<html>
    <head>
        <meta charset="UTF-8">
        <meta name='viewport' content="width=device-width, initial-scale=1.0">
        <title>testchat</title>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
        <style>
            .card-body{
                padding:0.5rem;
                
            }
            .mt-4, .my-4 {
                margin-top: 0.9rem!important;
                margin-bottom: 0.9rem!important;
                width:50%;
            }
            .input-group{
                margin-top: 0.4 rem;
            }
            .container{
                margin-top:0.5rem;
                background-color: white;
            }
            .my-message {
                float: right; clear:both; margin: 5px 45px 5px 20px; background-color: cornflowerblue;
            }
            .card-body span {
                font-size: 10px
            }
            .card-body p {
                text-align: justify;
            }
            .card-body .time {
                font-size: 10px;display:block;text-align:right;
            }
            .your-message {
                float: left; clear:both; margin: 5px 20px 5px 45px;
            }
            .enter-message {
                background-color: #f2f2f2;
                width:90%;
                height: 8%;
                margin: 0px auto;
            }
            .enter-message p{
                text-align: center;
            }

        </style>
    </head>
    <body>
        <nav class="navbar navbar-expand-sm bg-dark navbar-dark">
            <a routerLink="/" class="navbar-brand" href="http://localhost:3000">ChatRoom</a>
            <ul class="navbar-nav ml-auto">
            <li class="nav-item">
            <a class="nav-link" href="signup">SignUp</a>
            </li>
            <li class="nav-item">
            <a class="nav-link" href="signin">SignIn</a>
            </li>
            <li class="nav-item">
            <a class="nav-link" href="signout" id="signout">SignOut</a>
            </li>
            </ul>
        </nav>
        </div>
        <div class="container">
            <div class="card card-4">
            <div class="content" id="chatbox" style="overflow:scroll; height:750px;">
            <% messages.forEach(message => { %>
                <% if(message.user == user && user!=undefined){ %>
                <div class="card mt-4 my-message">
                    <div class="card-body"> 
                        <p class="card-body"><%= message.content %><span class="time"><%=message.createdAt %></span></p>
                    </div>
                </div>
                <% }  else { %>
                    <div class="card mt-4 your-message">
                        <div class="card-body">
                            <p class="card-body"><%= message.content %><span class="time"><%=message.createdAt %></span></p>
                        </div>
                    </div>
                    <% } %>
            <% }) %>
            </div>
            <form>
                <div class="input-group">
                    <input type="text" name="content" id="content" class="form-control">
                    <div class="input-group-prepend">
                            <button id="send_btn" class="btn btn-primary">></button>
                    </div>
                </div>
            </form>
            </div>
            <input type="hidden" id="myJsonData" value="<%=JSON.stringify(user)%>" />
        </div>
        <script src="/socket.io/socket.io.js"></script>
        <script>
            const socket = io();
            
            var scrollDiv = document.getElementById("chatbox");
            var enterBox = document.getElementById("enter");
            scrollDiv.scrollTop = scrollDiv.scrollHeight;

            var input = document.getElementById("content");
            var send_btn = document.getElementById("send_btn");
            send_btn.addEventListener("click", function(e) {
                e.preventDefault();
                send_message_from_input();
                socket.emit('chat-message',input.value);
                input.value = '';
            });

            function send_message_from_input() {
                if(input.value) {
                    add_message_to_db(input.value, function(response) {
                        if(response) {
                            // document.getElementById('message').innerHTML = response;
                            // location.reload();
                        } else {
                            alert("ERROR");
                        }
                    });
                } else {
                    alert("EMPTY MESSAGE");
                }
            }

            async function add_message_to_db(message, callback) {
                let response = await fetch('messages/',{
                    method: 'POST',
                    headers:{
                        'Content-Type' : 'application/json;charset=utf-8'
                    },
                    body:JSON.stringify({content:message})
                }).then(response => {
                    console.log(response);
                    if(response.status === 200 || response.status === 201) {
                        callback(response)
                    } else {
                        callback(undefined)
                    }
                }).catch(err => console.error(err));
            }

            var signout_btn = document.getElementById("signout");
            signout_btn.addEventListener("click", async function(e) {
                e.preventDefault();
                let response = await fetch('users/signout/',{
                    method: 'POST',
                    headers:{
                        'Content-Type' : 'application/json;charset=utf-8'
                    },
                    body:''
                }).then(response => {
                    if(response.status === 200 || response.status === 201) {
                        location.reload();
                    } else {
                        console.error(response.statusText);
                    }
                }).catch(err => console.error(err));
            });

            // SOCKET SECTION 
            const userData = <%-JSON.stringify(user)%>

            socket.emit('connected', userData);

            socket.on('enterance-message', (user) => {
                new_message(user,"enter-message");
            });

            socket.on('leave-message', (user) => {
                new_message(user,"enter-message");
            });

            socket.on('chat-message', (msg) => {
                new_message(msg,"your-message");
            });
            
            socket.on('my-message', (msg) => {
                new_message(msg,"my-message");
            })

            const new_message = (content, className) => {
                const message = document.createElement('div');
                message.classList.add('card','mt-4',`${className}`);
                let times = new Date().toLocaleTimeString();
                let innerText= `<div class="card-body"> 
                        <p class="card-body">${content}<span class="time">${times}</span></p>
                    </div>`
                message.innerHTML = innerText;
                scrollDiv.appendChild(message);
                scrollDiv.scrollTop = scrollDiv.scrollHeight;
            }



        </script>
    </body>
</html>